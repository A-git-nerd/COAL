     1                                  [org 0x100]
     2                                  
     3 00000000 EB0B                    jmp start
     4 00000002 010307                  numbers:db 0x01,0x03,0x07 ;byte numbers
     5 00000005 03                      size:db 3 ;size
     6 00000006 00                      count:db 0 ;for counting number of 1
     7 00000007 00                      iterations:db 0 ;for iterating 8 bits number
     8 00000008 0000000000              result: db 0x00,0x00,0x00,0x00,0x00 ;to store even parity number at starting
     9                                  
    10                                  start:
    11 0000000D BE0000                  mov si,0 ;for taking numbers
    12                                  
    13                                  taking_number:
    14 00000010 3B36[0500]              cmp si,[size] ;condition to terminate program from taking numbers 
    15 00000014 7451                    je end
    16                                  
    17 00000016 8A84[0200]              mov al,[numbers+si] ;loading number
    18                                  
    19                                  counting: ;counting num of 1
    20 0000001A 3B36[0500]              cmp si,[size] ;condition to terminate program from taking numbers 
    21 0000001E 7447                    je end
    22                                  
    23 00000020 803E[0700]08            cmp byte [iterations],8 ;terminate loop after 8 bit
    24 00000025 7414                    je checking_counts
    25                                  
    26 00000027 D0E8                    shr al,1 ;taking lsb bit
    27 00000029 7206                    jc carryFound
    28                                  
    29 0000002B FE06[0700]              inc byte [iterations] ;only increament iterations
    30 0000002F EBE9                    jmp counting
    31                                  
    32                                  carryFound: ;increament count and iterations
    33 00000031 FE06[0600]              inc byte [count]
    34 00000035 FE06[0700]              inc byte [iterations]
    35 00000039 EBDF                    jmp counting
    36                                  
    37                                  checking_counts: ;checking_counts by shr if CF=1 its odd then need to remove it
    38 0000003B A0[0600]                mov al,[count]
    39 0000003E D0E8                    shr al,1
    40 00000040 7210                    jc oddParity ;removing that number
    41 00000042 46                      inc si
    42 00000043 C606[0700]00            mov byte [iterations],0
    43 00000048 C606[0600]00            mov byte [count],0
    44 0000004D B80000                  mov ax,0
    45 00000050 EBBE                    jmp taking_number
    46                                  
    47                                  oddParity:  ;removing the oddParity number
    48 00000052 C684[0200]00            mov byte [numbers+si],0
    49 00000057 46                      inc si
    50 00000058 C606[0700]00            mov byte [iterations],0
    51 0000005D C606[0600]00            mov byte [count],0
    52 00000062 B80000                  mov ax,0
    53 00000065 EBA9                    jmp taking_number
    54                                  
    55                                  
    56                                  end:
    57 00000067 BE0000                  mov si,0
    58 0000006A BF0000                  mov di,0
    59                                  writing_numbers_in_result: ;writing even parity numbers in result
    60 0000006D 3B36[0500]              cmp si,[size]
    61 00000071 7416                    je terminate
    62                                  
    63 00000073 80BC[0200]00            cmp byte [numbers+si],0x00
    64 00000078 7503                    jne write ;if number is non zero then need to write
    65 0000007A 46                      inc si ;if number is zero then increament si only
    66 0000007B EBF0                    jmp writing_numbers_in_result
    67                                  
    68                                  write:
    69 0000007D 8B84[0200]              mov ax,[numbers+si]
    70 00000081 8985[0800]              mov [result+di],ax
    71 00000085 47                      inc di  ;if number is zero then need to increament si and di 
    72 00000086 46                      inc si
    73 00000087 EBE4                    jmp writing_numbers_in_result
    74                                  
    75                                  terminate:
    76 00000089 B8004C                  mov ax,0x4c00
    77 0000008C CD21                    int 0x21
