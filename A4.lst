     1                                  [org 0x100]
     2                                  
     3 00000000 EB04                    jmp start
     4 00000002 FF                      multiplicand: db -1       ;bl ;8bit number
     5 00000003 08                      multiplier:   db 8        ;dl  ;8bit number
     6 00000004 0000                    result:      dw 0              ;16bit number
     7                                  
     8                                  start:
     9 00000006 8A1E[0200]              mov bl, [multiplicand]  
    10 0000000A 8A16[0300]              mov dl, [multiplier]   
    11                                  
    12                                  ;for multiplicand
    13 0000000E B500                    mov ch, 0                ;making ch=0x00
    14 00000010 88D8                    mov al, bl               ;moving multiplicand in al to chec its sign
    15 00000012 C0F807                  sar al, 7                ;taking sign
    16 00000015 7907                    jns multiplicand_positive  ;if sf=0 its positive
    17 00000017 F6D5                    not ch          ;else make bh=0x11         
    18                                  
    19 00000019 F6D3                    not bl                            ;taking 2's complement of multiplicand if sf=1      
    20 0000001B 80C301                  add bl,1
    21                                  
    22                                  multiplicand_positive: ;for multiplier
    23 0000001E 88D0                     mov al, dl   ;loading multiplier in al
    24 00000020 C0F807                   sar al, 7    ;checking sign          
    25 00000023 7907                     jns multiplier_positive ;if sf=0 then multiplier is positive
    26 00000025 F6D2                     not dl                 ;else taking 2's complement
    27 00000027 80C201                   add dl, 1              
    28 0000002A F6D5                     not ch                ;taking not of bh 
    29                                  
    30                                  multiplier_positive: 
    31 0000002C B108                     mov cl, 8              ;count , multiplier is 4 bit number
    32 0000002E B80000                   mov ax, 0             
    33                                  
    34                                  ;multiplication logic that we learn in class
    35                                  checkbit:
    36 00000031 D1EA                    shr dx,1             
    37 00000033 7302                    jnc skip                 
    38 00000035 01D8                    add ax, bx             
    39                                  
    40                                  skip:
    41 00000037 D1E3                     shl bx, 1                          
    42 00000039 FEC9                     dec cl                
    43 0000003B 75F4                     jnz checkbit           
    44                                  
    45 0000003D 80FD00                   cmp ch, 0x00 ;if ch=0x00 result must be in positive e.g(+ve)(+ve) or (-ve)(-ve)
    46 00000040 7405                     je termination    
    47 00000042 F7D0                     not ax            ;else ch=0x11 need to taking 2's complement of result cuz (+ve)(-ve) or (-ve)(+ve)
    48 00000044 83C001                  add ax,1
    49                                  
    50                                  termination:
    51 00000047 A3[0400]                mov [result], ax  ;moving ax into result         
    52                                  
    53 0000004A B8004C                  mov ax, 0x4c00
    54 0000004D CD21                    int 0x21
