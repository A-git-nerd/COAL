     1                                  [org 0x0100]
     2                                  
     3 00000000 EB5E                    jmp start
     4 00000002 20                      s:db' '
     5                                  
     6                                  setup:
     7 00000003 B413                    mov ah,0x13
     8 00000005 B001                    mov al,1
     9                                  
    10 00000007 B700                    mov bh,0
    11 00000009 B307                    mov bl,0x07
    12                                  
    13 0000000B B90100                  mov cx,1
    14                                  
    15 0000000E BA0000                  mov dx,0x000
    16 00000011 BD[0200]                mov bp,s
    17 00000014 CD10                    int 10h
    18                                  
    19                                  clrSrc:
    20 00000016 50                          push ax
    21 00000017 06                          push es
    22 00000018 57                          push di
    23 00000019 51                          push cx
    24 0000001A B800B8                      mov ax, 0xb800
    25 0000001D 8EC0                        mov es, ax
    26 0000001F BF0000                      mov di, 0
    27 00000022 B82007                      mov ax, 0x0720
    28 00000025 B9D007                      mov cx, 2000
    29 00000028 F3AB                        rep stosw
    30 0000002A 59                          pop cx
    31 0000002B 5F                          pop di
    32 0000002C 07                          pop es
    33 0000002D 58                          pop ax
    34 0000002E C3                          ret
    35                                  ; Data section for the counter
    36 0000002F 0000                    counter dw 0
    37                                  
    38                                  ; Interrupt Service Routine for INT 0x60
    39                                  isr_60:
    40                                      ; Save registers
    41 00000031 50                          push ax
    42 00000032 53                          push bx
    43 00000033 51                          push cx
    44 00000034 52                          push dx
    45                                  
    46                                      ; Increment the counter in memory
    47 00000035 A1[2F00]                    mov ax, [counter]
    48 00000038 40                          inc ax
    49 00000039 A3[2F00]                    mov [counter], ax
    50                                  
    51                                      ; Convert the counter to hexadecimal for display
    52 0000003C 89C3                        mov bx, ax         ; Move counter value to BX for conversion
    53                                  
    54                                      ; Display the high nibble
    55 0000003E B104                        mov cl, 4          ; Shift to get the high nibble
    56 00000040 88D8                        mov al, bl         ; Load lower byte of BX (counter)
    57 00000042 D2E8                        shr al, cl
    58 00000044 E80C00                      call display_hex
    59                                  
    60                                      ; Display the low nibble
    61 00000047 88D8                        mov al, bl
    62 00000049 240F                        and al, 0x0F       ; Mask out the high nibble
    63 0000004B E80500                      call display_hex
    64                                  
    65                                      ; Restore registers
    66 0000004E 5A                          pop dx
    67 0000004F 59                          pop cx
    68 00000050 5B                          pop bx
    69 00000051 58                          pop ax
    70                                  
    71                                      ; Return from interrupt
    72 00000052 CF                          iret
    73                                  
    74                                  ; Subroutine to display a hexadecimal digit (AL should contain a hex digit 0-F)
    75                                  display_hex:
    76 00000053 0430                        add al, '0'              ; Convert to ASCII
    77 00000055 3C39                        cmp al, '9'
    78 00000057 7602                        jbe display_done         ; If <= '9', it's valid as is
    79 00000059 0407                        add al, 7                ; Adjust for 'A'-'F'
    80                                  
    81                                  display_done:
    82 0000005B B40E                        mov ah, 0x0E             ; BIOS Teletype function
    83 0000005D CD10                        int 0x10                 ; Display character in AL
    84 0000005F C3                          ret
    85                                  
    86                                  ; Main Program
    87                                  start:
    88 00000060 E8B3FF                  call clrSrc
    89 00000063 E89DFF                  call setup
    90                                      ; Install our ISR at interrupt vector 0x60
    91 00000066 FA                          cli                      ; Disable interrupts temporarily
    92 00000067 31C0                        xor ax, ax
    93 00000069 8EC0                        mov es, ax               ; Set ES to 0 (IVT base)
    94 0000006B 26C7068001[3100]            mov word [es:0x60 * 4], isr_60   ; Set offset of ISR in IVT
    95 00000072 268C0E8201                  mov word [es:0x60 * 4 + 2], cs   ; Set segment of ISR in IVT
    96 00000077 FB                          sti                      ; Re-enable interrupts
    97                                  
    98                                      ; Trigger INT 0x60 multiple times to test the ISR
    99                                  trigger_loop:
   100 00000078 B40E                        mov ah, 0x0E
   101 0000007A B028                        mov al, '('
   102 0000007C CD10                        int 0x10                 ; Display '-' before each interrupt
   103 0000007E CD60                        int 0x60   
   104                                  
   105 00000080 B40E                     mov ah, 0x0E
   106 00000082 B029                        mov al, ')'
   107 00000084 CD10                        int 0x10   
   108 00000086 B40E                        mov ah, 0x0E
   109 00000088 B020                        mov al, ' '              ; Space after displaying count
   110 0000008A CD10                        int 0x10
   111 0000008C E80200                      call delay               ; Delay between triggers
   112 0000008F EBE7                        jmp trigger_loop
   113                                  
   114                                  ; Simple delay subroutine
   115                                  delay:
   116 00000091 51                          push cx
   117 00000092 B90F00                      mov cx, 15              ; Outer loop count (adjust to increase/decrease delay)
   118                                  delay_loop1:
   119 00000095 51                          push cx
   120 00000096 B9FFFF                      mov cx, 0xFFFF         ; Inner loop count (adjust to increase/decrease delay)
   121                                  delay_loop2:
   122 00000099 E2FE                        loop delay_loop2
   123 0000009B 59                          pop cx
   124 0000009C E2F7                        loop delay_loop1
   125 0000009E 59                          pop cx
   126 0000009F C3                          ret
   127                                  
   128                                  
