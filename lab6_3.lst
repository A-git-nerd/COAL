     1                                  [org 0x100]
     2 00000000 EB7D                    jmp start
     3 00000002 010002000700040005-     arr: dw 0x0001,0x0002,0x0007,0x0004,0x0005
     3 0000000B 00                 
     4 0000000C 0A00                    sized: dw 10
     5                                  
     6                                  maxdiff:
     7 0000000E 56                      push si ;will iterate in array
     8 0000000F 55                      push bp
     9 00000010 89E5                    mov bp,sp
    10 00000012 89EE                    mov si,bp
    11                                  
    12 00000014 53                      push bx
    13 00000015 83EC02                  sub sp,2
    14 00000018 89E3                    mov bx,sp ; having big number
    15 0000001A C7070000                mov word[bx],0
    16                                  
    17 0000001E 57                      push di
    18 0000001F 83EC02                  sub sp,2
    19 00000022 89E7                    mov di,sp       ; having smallnumber
    20 00000024 C7040000                mov word[si],0
    21                                  
    22 00000028 8B7608                  mov si,[bp+8]  ;initializing base address to si
    23 0000002B BA0000                  mov dx,0       ;[bp+6] initializing size to dx
    24 0000002E 31C0                    xor ax,ax
    25                                  
    26                                  
    27                                  
    28                                  
    29 00000030 3B04                    loop1:cmp ax,[si]
    30 00000032 7C0D                    jl update1
    31 00000034 83C202                  traversing:add dx,2
    32 00000037 83C602                  add si,2
    33 0000003A 3B5606                  cmp dx,[bp+6]
    34 0000003D 7406                    je next
    35 0000003F EBEF                    jmp loop1
    36 00000041 8B04                    update1:mov ax,[si]
    37 00000043 EBEF                    jmp traversing
    38                                  next:
    39 00000045 8907                    mov [bx],ax
    40                                  
    41                                  
    42 00000047 8B7608                  mov si,[bp+8]  ;initializing base address to si
    43 0000004A BA0000                  mov dx,0       ;[bp+6] initializing size to dx
    44 0000004D 31C0                    xor ax,ax
    45                                  
    46 0000004F 8B04                    mov ax,[si]
    47 00000051 3B04                    loop2:cmp ax,[si]
    48 00000053 7F0D                    jg update2
    49 00000055 83C202                  traversing2:add dx,2
    50 00000058 83C602                  add si,2
    51 0000005B 3B5606                  cmp dx,[bp+6]
    52 0000005E 7406                    je next2
    53 00000060 EBEF                    jmp loop2
    54 00000062 8B04                    update2:mov ax,[si]
    55 00000064 EBEF                    jmp traversing2
    56                                  
    57 00000066 8905                    next2:mov [di],ax
    58 00000068 8B07                    mov ax,[bx]
    59 0000006A 89460A                  mov [bp+10],ax
    60 0000006D 8B05                    mov ax,[di]
    61 0000006F 29460A                  sub [bp+10],ax
    62 00000072 83C402                  add sp,2
    63 00000075 5F                      pop di
    64 00000076 83C402                  add sp,2
    65 00000079 5B                      pop bx
    66 0000007A 5D                      pop bp
    67 0000007B 5E                      pop si
    68 0000007C C20400                  ret 4
    69                                  
    70                                  
    71                                  
    72                                  
    73                                  
    74                                  start:
    75 0000007F B80000                  mov ax,0x0000
    76 00000082 BB0000                  mov bx,0x0000
    77 00000085 B90000                  mov cx,0x0000
    78 00000088 BA0000                  mov dx,000000
    79 0000008B 83EC02                  sub sp,2
    80 0000008E 68[0200]                push arr
    81 00000091 FF36[0C00]              push word[sized]
    82 00000095 E876FF                  call maxdiff
    83 00000098 58                      pop ax
    84                                  
    85 00000099 B8004C                  mov ax,0x4c00
    86 0000009C CD21                    int 0x21
